/*
   CheMPS2: a spin-adapted implementation of DMRG for ab initio quantum chemistry
   Copyright (C) 2013, 2014 Sebastian Wouters

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License along
   with this program; if not, write to the Free Software Foundation, Inc.,
   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/

#include <iostream>
#include <math.h>
#include <string.h>

#include "Initialize.h"
#include "DMRG.h"
#include "FCI.h"

using namespace std;

int main(void){

   CheMPS2::Initialize::Init();
   
   //The path to the matrix elements
   string matrixelements = "${CMAKE_SOURCE_DIR}/tests/matrixelements/H2O_631G_eq.dat";
   
   //The Hamiltonian
   CheMPS2::Hamiltonian * Ham = new CheMPS2::Hamiltonian(matrixelements);
   cout << "The group was found to be " << CheMPS2::Irreps::getGroupName(Ham->getNGroup()) << endl;
   
   //The targeted state
   const int TwoS = 0;
   const int N = 10;
   const int Irrep = 0;
   CheMPS2::Problem * Prob = new CheMPS2::Problem(Ham, TwoS, N, Irrep);
   
   //The convergence scheme
   CheMPS2::ConvergenceScheme * OptScheme = new CheMPS2::ConvergenceScheme(2);
   int D = 100;
   double Econv = 1e-10;
   int maxSweeps = 3;
   double noisePrefactor = 0.1;
   OptScheme->setInstruction(0,D,Econv,maxSweeps,noisePrefactor);
   D = 3000;
   maxSweeps = 10;
   noisePrefactor = 0.0;
   OptScheme->setInstruction(1,D,Econv,maxSweeps,noisePrefactor);
   
   //Run ground state calculation
   CheMPS2::DMRG * theDMRG = new CheMPS2::DMRG(Prob, OptScheme);
   const double EnergyDMRG = theDMRG->Solve();
   theDMRG->calc2DMandCorrelations();
   
   //Clean up DMRG
   if (CheMPS2::DMRG_storeMpsOnDisk){ theDMRG->deleteStoredMPS(); }
   if (CheMPS2::DMRG_storeRenormOptrOnDisk){ theDMRG->deleteStoredOperators(); }
   delete theDMRG;
   delete OptScheme;
   
   //Calculate FCI reference energy
   const int FCIverbose = 1;
   CheMPS2::FCI * theFCI = new CheMPS2::FCI(Prob, FCIverbose);
   double * inoutput = new double[theFCI->getVecLength()];
   const int NLowEnergyDet = 1;
   theFCI->GSSmallCISpace(NLowEnergyDet, inoutput);
   const double EnergyFCI = theFCI->GSDavidson(inoutput);
   theFCI->CalcSpinSquared(inoutput);
   delete [] inoutput;
   
   //Clean up FCI
   delete theFCI;
   delete Prob;
   delete Ham;
   
   //Check succes
   bool success = ( fabs( EnergyDMRG - EnergyFCI ) < 1e-10 ) ? true : false;
   cout << "================> Did test 2 succeed : ";
   if (success){ cout << "yes" << endl; }
   else { cout << "no" << endl; }

   return 0;

}


