/*
   CheMPS2: a spin-adapted implementation of DMRG for ab initio quantum chemistry
   Copyright (C) 2013-2015 Sebastian Wouters

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License along
   with this program; if not, write to the Free Software Foundation, Inc.,
   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/

#include <iostream>
#include <math.h>
#include <string.h>

#include "Initialize.h"
#include "CASSCF.h"
#include "DMRGSCFoptions.h"
#include "MPIchemps2.h"

using namespace std;

int main(void){

   #ifdef CHEMPS2_MPI_COMPILATION
   cout << "CheMPS2::CASSCF does not work with MPI yet." << endl;
   return 7;
   CheMPS2::MPIchemps2::mpi_init();
   #endif

   CheMPS2::Initialize::Init();
   
   //The path to the matrix elements
   string matrixelements = "${CMAKE_SOURCE_DIR}/tests/matrixelements/N2.CCPVDZ.FCIDUMP";
   
   //Setup the Hamiltonian
   const int psi4groupnumber = 7; // d2h -- see Irreps.h and N2.ccpvdz.out
   const int nIrreps = CheMPS2::Irreps::getNumberOfIrreps( psi4groupnumber );
   CheMPS2::Hamiltonian * Ham = new CheMPS2::Hamiltonian( matrixelements, psi4groupnumber );
   
   //Setup CASSCF --> number of irreps = 8
   int DOCC[] = { 3, 0, 0, 0, 0, 2, 1, 1 }; // see N2.ccpvdz.out
   int SOCC[] = { 0, 0, 0, 0, 0, 0, 0, 0 };
   CheMPS2::CASSCF koekoek( Ham, DOCC, SOCC );
   
   int Nocc[]  = { 1, 0, 0, 0, 0, 1, 0, 0 };
   int NDMRG[] = { 4, 0, 1, 1, 0, 4, 1, 1 };
   int Nvirt[] = { 2, 1, 2, 2, 1, 2, 2, 2 };
   koekoek.setupStart(Nocc,NDMRG,Nvirt);
   
   //Setup symmetry sector
   int N = 14;
   int TwoS = 0;
   int Irrep = 0;
   
   //Setup convergence scheme
   CheMPS2::ConvergenceScheme * OptScheme = new CheMPS2::ConvergenceScheme(1);
   int D = 1000;
   double Econv = 1e-8;
   int maxSweeps = 20;
   double noisePrefactor = 0.0;
   OptScheme->setInstruction(0,D,Econv,maxSweeps,noisePrefactor);

   //Run CASSCF
   int rootNum = 1; //Ground state only
   CheMPS2::DMRGSCFoptions * theDMRGSCFoptions = new CheMPS2::DMRGSCFoptions();
   theDMRGSCFoptions->setDoDIIS(true);
   theDMRGSCFoptions->setWhichActiveSpace(2); //2 means localized orbitals
   double Energy = koekoek.doCASSCFnewtonraphson(N, TwoS, Irrep, OptScheme, rootNum, theDMRGSCFoptions);
   
   //Clean up
   if (theDMRGSCFoptions->getStoreUnitary()){ koekoek.deleteStoredUnitary( theDMRGSCFoptions->getUnitaryStorageName() ); }
   if (theDMRGSCFoptions->getStoreDIIS()){ koekoek.deleteStoredDIIS( theDMRGSCFoptions->getDIISStorageName() ); }
   delete OptScheme;
   delete theDMRGSCFoptions;
   delete Ham;
   
   //Check succes
   const bool success = ( fabs( Energy + 109.15104350802 ) < 1e-8 ) ? true : false;
   
   #ifdef CHEMPS2_MPI_COMPILATION
   CheMPS2::MPIchemps2::mpi_finalize();
   #endif
   
   cout << "================> Did test 9 succeed : ";
   if (success){
      cout << "yes" << endl;
      return 0; //Success
   }
   cout << "no" << endl;
   return 7; //Fail

}


